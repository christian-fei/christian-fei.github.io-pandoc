#!/usr/bin/env node

const http = require('http')
const Websocket = require('ws')
const fs = require('fs')
const path = require('path')

const initPocket = require('./init-pocket')
const getPocketItems = require('./get-pocket-items')

const pocketItemsFilePath = path.join(__dirname, 'pocket.json')

main(process.argv.slice(2)[0])
.catch(err => { console.error(err); process.exit(1) })

async function main (POCKET_ACCESS_TOKEN) {
  const httpServer = http.createServer()
  httpServer.on('request', requestHandler)
  httpServer.listen(4000)

  // console.log('http server listening on http://localhost:4000')

  const wsServer = new Websocket.Server({ server: httpServer })

  let pocketItems = []

  wsServer.on('connection', (ws) => {
    console.log('ü§ñ  ws client connected')

    wsServer.clients.forEach((client) => client.send(JSON.stringify({ type: 'items', payload: pocketItems })))

    ws.on('message', message => {
      console.log('‚úçÔ∏è  ws client sent message', message)
      const parsedMessage = JSON.parse(message)
      if (parsedMessage === 'get:items') {
        const type = parsedMessage
        const payload = []
        return ws.send(JSON.stringify({ type, payload }))
      }

      ws.send(message)
    })
  })

  if (!POCKET_ACCESS_TOKEN) {
    POCKET_ACCESS_TOKEN = await initPocket()
  }

  pocketItems = await getPocketItems(POCKET_ACCESS_TOKEN)

  console.log('received pocketItems.length', pocketItems.length)
  console.log('üëâ  visit http://localhost:4000')

  wsServer.clients.forEach((client) => client.send(JSON.stringify({ type: 'items', payload: pocketItems })))

  process.on('uncaughtException', console.error)
}


function requestHandler (req, res) {
  if (req.url === '/') {
    console.log('serving index', req.url)
    res.write(index())
    return res.end()
  }
  if (req.url === '/favicon.ico') return res.end()

  console.log('‚õîÔ∏è  unhandled', req.url)

  res.end()
}

function index () {
  return fs.readFileSync(path.join(__dirname, 'index.html'), 'utf-8')
}

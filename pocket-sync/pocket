#!/usr/bin/env node

const http = require('http')
const Websocket = require('ws')
const fs = require('fs')
const path = require('path')

const initPocket = require('./init-pocket')
const getPocketItems = require('./get-pocket-items')

const pocketItemsFilePath = path.join(__dirname, 'state', 'pocket.json')
const blackListedItemsFilePath = path.join(__dirname, 'state', 'blacklisted-items.json')
const { POCKET_CONSUMER_KEY } = require('./secrets.json')

main(process.argv.slice(2)[0])
.catch(err => { console.error(err); process.exit(1) })

async function main (POCKET_ACCESS_TOKEN) {
  const httpServer = http.createServer()
  httpServer.on('request', requestHandler)
  httpServer.listen(4000)

  const wsServer = new Websocket.Server({ server: httpServer })

  let pocketItems = fs.readFileSync(pocketItemsFilePath)
  pocketItems = JSON.parse(pocketItems)

  wsServer.on('connection', (ws) => {
    console.log('🤖  [ws] connected')
    broadcastMessageOn(wsServer, JSON.stringify({
      type: 'items',
      payload: pocketItems
    }))
    ws.on('message', handleWsMessage(ws))
  })

  if (!POCKET_ACCESS_TOKEN) {
    POCKET_ACCESS_TOKEN = await initPocket(POCKET_CONSUMER_KEY)
  }

  pocketItems = await getPocketItems(POCKET_ACCESS_TOKEN)

  console.log('📩  [server] pocketItems.length', pocketItems.length)
  console.log('👉  visit http://localhost:4000')

  broadcastMessageOn(wsServer, JSON.stringify({ type: 'items', payload: pocketItems }))

  process.on('uncaughtException', console.error)
}

function handleWsMessage (ws) {
  return (message) => {
    console.log('✍️  [ws] sent message', message)
    const parsedMessage = JSON.parse(message) || {}
    const {type, payload} = parsedMessage

    if (type === 'add:item') {
      console.log('add:item', payload)
      let pocketItems = fs.readFileSync(pocketItemsFilePath)
      pocketItems = JSON.parse(pocketItems)
      let updatedPocketItems = Object.assign({}, pocketItems)
      const item = pocketItems.find(({item_id}) => item_id === payload)

      pocketItems.lastAdded = new Date().toISOString()
      pocketItems.items = Array.isArray(pocketItems.items) ? pocketItems.items : []
      pocketItems.items = pocketItems.items.reduce((acc, item) => item.item_id === payload ? acc : acc.concat([item]), [item])

      fs.writeFileSync(pocketItemsFilePath, JSON.stringify(pocketItems, null, 2))
      console.log('✍️  [ws] send message', message)

      return ws.send(JSON.stringify({
        type: 'added:item',
        payload: {
          item_id: payload,
          status: 'success'
        }
      }))
    }
    if (type === 'blacklist:item') {
      console.log('blacklist:item', payload)
      let blackListedItems = fs.readFileSync(blackListedItemsFilePath)
      blackListedItems = JSON.parse(blackListedItems)

      const updatedBlacklistedItems = blackListedItems.reduce((acc, id) => id === payload ? acc : acc.concat([id]), [payload])
      fs.writeFileSync(blackListedItemsFilePath, JSON.stringify(updatedBlacklistedItems))

      return ws.send(JSON.stringify({
        type: 'blacklisted:item',
        payload: {
          item_id: payload,
          status: 'success'
        }
      }))
    }

    ws.send(message)
  }
}

function broadcastMessageOn (wsServer, message) {
  wsServer.clients.forEach((client) => client.send(message))
}

function requestHandler (req, res) {
  if (req.url === '/') {
    console.log('📖  [serve] index', req.url)
    res.write(index())
    return res.end()
  }
  if (req.url === '/favicon.ico') return res.end()

  console.log('⛔️  unhandled', req.url)

  res.end()
}

function index () {
  return fs.readFileSync(path.join(__dirname, 'index.html'), 'utf-8')
}

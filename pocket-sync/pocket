#!/usr/bin/env node

const http = require('http')
const Websocket = require('ws')
const fs = require('fs')
const path = require('path')

const initPocket = require('./init-pocket')
const getPocketItems = require('./get-pocket-items')

const pocketItemsFilePath = path.join(__dirname, 'state', 'pocket.json')
const blackListedItemsFilePath = path.join(__dirname, 'state', 'blacklisted-items.json')

main(process.argv.slice(2)[0])
.catch(err => { console.error(err); process.exit(1) })

async function main (POCKET_ACCESS_TOKEN) {
  const httpServer = http.createServer()
  httpServer.on('request', requestHandler)
  httpServer.listen(4000)

  // console.log('http server listening on http://localhost:4000')

  const wsServer = new Websocket.Server({ server: httpServer })

  let pocketItems = []

  wsServer.on('connection', (ws) => {
    console.log('ü§ñ  ws client connected')

    wsServer.clients.forEach((client) => client.send(JSON.stringify({ type: 'items', payload: pocketItems })))

    ws.on('message', message => {
      console.log('‚úçÔ∏è  ws client sent message', message)
      const parsedMessage = JSON.parse(message)

      if (parsedMessage && parsedMessage.type === 'add:item') {
        const {payload} = parsedMessage
        console.log('add:item', payload)
        let addedPocketItems = fs.readFileSync(pocketItemsFilePath)
        addedPocketItems = JSON.parse(addedPocketItems)
        let updatedPocketItems = Object.assign({}, addedPocketItems)
        addedPocketItems.lastAdded = new Date().toISOString()
        addedPocketItems.items = Array.isArray(addedPocketItems.items) ? addedPocketItems.items : []
        const item = pocketItems.find(({item_id}) => item_id === payload)
        addedPocketItems.items = addedPocketItems.items.reduce((acc, item) => item.item_id === payload ? acc : acc.concat([item]), [item])
        // pocketItems.reduce((acc, id) => id === payload ? acc : acc.concat([id]), [payload])
        fs.writeFileSync(pocketItemsFilePath, JSON.stringify(addedPocketItems))
        return ws.send(JSON.stringify({
          type: 'add:item',
          payload: {
            item_id: payload,
            status: 'success'
          }
        }))
      }
      if (parsedMessage && parsedMessage.type === 'blacklist:item') {
        const {payload} = parsedMessage
        console.log('blacklist:item', payload)
        let blackListedItems = fs.readFileSync(blackListedItemsFilePath)
        blackListedItems = JSON.parse(blackListedItems)
        const updatedBlacklistedItems = blackListedItems.reduce((acc, id) => id === payload ? acc : acc.concat([id]), [payload])
        fs.writeFileSync(blackListedItemsFilePath, JSON.stringify(updatedBlacklistedItems))
        return ws.send(JSON.stringify({
          type: 'blacklist:item',
          payload: {
            item_id: payload,
            status: 'success'
          }
        }))
      }

      ws.send(message)
    })
  })

  if (!POCKET_ACCESS_TOKEN) {
    POCKET_ACCESS_TOKEN = await initPocket()
  }

  pocketItems = await getPocketItems(POCKET_ACCESS_TOKEN)

  console.log('received pocketItems.length', pocketItems.length)
  console.log('üëâ  visit http://localhost:4000')

  wsServer.clients.forEach((client) => client.send(JSON.stringify({ type: 'items', payload: pocketItems })))

  process.on('uncaughtException', console.error)
}


function requestHandler (req, res) {
  if (req.url === '/') {
    console.log('serving index', req.url)
    res.write(index())
    return res.end()
  }
  if (req.url === '/favicon.ico') return res.end()

  console.log('‚õîÔ∏è  unhandled', req.url)

  res.end()
}

function index () {
  return fs.readFileSync(path.join(__dirname, 'index.html'), 'utf-8')
}
